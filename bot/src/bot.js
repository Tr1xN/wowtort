import { Bot, Keyboard, InlineKeyboard, session } from 'grammy';
import dotenv from 'dotenv';
import moment from 'moment';

import { connectToMongo, createUser, findUser } from './db/index.js';
import { mainMenu, cakeCategorys, requestContact, requestLocation } from './keyboards/markup/index.js';
import { deliveryChoose, infoKeyboard, clearHelp, help, orderConfirm, emptyKeyboard, productMenu, cartConfirm } from './keyboards/inline/index.js';
import { cakesMenuUpdate, nextPage, prevPage, createOrder, sMail } from './customFuncs.js';
import Calendar from './calendar.js';
import { reverseLocation } from './geocoder.js';

import cakeModel from './db/models/cake.model.js';
import userModel from './db/models/user.model.js';
import optionsModel from './db/models/options.model.js';

dotenv.config();
moment.locale('uk');


connectToMongo(process.env.MONGO_URI);
let calendarParams = {}
if (moment().hours() < 11) {
    calendarParams = { minDate: -1, maxDate: 81 };
}
else {
    calendarParams = { minDate: 0, maxDate: 81 };
}

const calendar = new Calendar(calendarParams)

const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new Bot(BOT_TOKEN);
const managerPhoneNum = '+380981234516';

function initial() {
    return { product: {}, cart: [], order: {}, currentCategory: 'WOW —Ç–æ—Ä—Ç–∏', waitDeliveryPoint: false, deliveryPoint: '' };
}
bot.use(session({ initial }));

bot.on(':location', async (ctx) => {
    ctx.session.order.deliveryPoint = await reverseLocation(ctx.message.location.latitude, ctx.message.location.longitude)
    console.log(ctx.session.order.deliveryPoint);
    ctx.reply('–í–∞—à–∞ –∞—Ä–¥–µ—Å–∞: ' + ctx.session.order.deliveryPoint, { reply_markup: { resize_keyboard: true, keyboard: cakeCategorys.build() } })
    ctx.reply('–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:', { reply_markup: calendar.getCalendarKeyboard() })
    ctx.session.waitDeliveryPoint = false;
})

bot.on('msg:contact', async ctx => {
    createUser({ firstName: ctx.from.first_name, phoneNumber: ctx.message.contact.phone_number, _id: ctx.from.id })
    ctx.reply('–ü—Ä–∏–≤—ñ—Ç, ' + ctx.from.first_name + '!')
    await sleep(1)
    ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç—É WOW –¥–æ—Å—Ç–∞–≤–∫–∏!‚ò∫')
    await sleep(1)

    // tmp
    if (moment().isBefore(moment("2022-08-26", "YYYY-MM-DD"))) {
        ctx.reply('–í –ø–µ—Ä—ñ–æ–¥ —Å 23.08 –ø–æ 25.08 —á–∞—Ç –±–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∏–π–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
        await sleep(1)
    }
    //

    ctx.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–Ω—é, –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó‚¨á', { reply_markup: { resize_keyboard: true, keyboard: mainMenu.build() } })
})

bot.on('msg', async ctx => {
    const product = ctx.session.product;
    const cart = ctx.session.cart;
    const currentCategory = ctx.session.currentCategory;

    if (await findUser(ctx.from.id) === null)
        ctx.reply('‚ùóÔ∏è–î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É‚ùóÔ∏è\n\nüç¨ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É". –Ø–∫—â–æ —Ç–∞–∫–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–∫–æ–Ω–∫—É üéõ –≤ –ø–æ–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.', { reply_markup: { resize_keyboard: true, keyboard: requestContact.build() } })
    else {
        let text = ctx.message.text
        if (text == '/start') {
            ctx.reply('–ü—Ä–∏–≤—ñ—Ç, ' + ctx.from.first_name + '!')
            await sleep(1)
            ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç—É WOW –¥–æ—Å—Ç–∞–≤–∫–∏!‚ò∫')
            await sleep(1)

            // tmp
            if (moment().isBefore(moment("2022-08-26", "YYYY-MM-DD"))) {
                ctx.reply('–í –ø–µ—Ä—ñ–æ–¥ —Å 23.08 –ø–æ 25.08 —á–∞—Ç –±–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∏–π–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
                await sleep(1)
            }
            //

            ctx.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–Ω—é, –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó‚¨á', { reply_markup: { resize_keyboard: true, keyboard: mainMenu.build() } })
        }
        if (text == 'üõí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
            ctx.reply('–ú–µ–Ω—é —Ç–æ–≤–∞—Ä—ñ–≤:', { reply_markup: { resize_keyboard: true, keyboard: cakeCategorys.build() } })
        if (text == 'üõçÔ∏è–ö–æ—à–∏–∫') {
            if (cart[0] == undefined) {
                ctx.reply('–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π')
            }
            else {
                let cartList = '';
                ctx.session.order.price = 0;
                for (let i = 0; i < cart.length; i++) {
                    let prefix = '';
                    if (cart[i].category == 'WOW —Ç–æ—Ä—Ç–∏') {
                        prefix = "–¢–æ—Ä—Ç "
                    }
                    else if (cart[i].category == '–ü–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω—ñ —Ü—É–∫–µ—Ä–∫–∏') {
                        prefix = "–¶—É–∫–µ—Ä–∫–∏ "
                    }
                    else if (cart[i].category == '–ü—Ä—è–Ω–∏–∫–∏') {
                        prefix = "–ü—Ä—è–Ω–∏–∫–∏ "
                    }
                    else if (cart[i].category == '–ü–µ—á–∏–≤–æ –¢–ú –õ—é–±—á–∏–∫') {
                        prefix = "–ü–µ—á–∏–≤–æ "
                    }
                    ctx.session.order.price += cart[i].price;
                    cartList += `${prefix + cart[i].cake} (${cart[i].price} –≥—Ä–Ω.);\n`
                }
                ctx.reply(`–¢–æ–≤–∞—Ä–∏ —É –≤–∞—à–æ–º—É –∫–æ—à–∏–∫—É: ${cart.length}\n\n–í–∞—à –∫–æ—à–∏–∫:\n${cartList}\n–í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç–∏: ${ctx.session.order.price} –≥—Ä–Ω.\n–ü—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 500 –≥—Ä–Ω - –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞\n–î–æ—Å—Ç–∞–≤–∫–∞, –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –∫—Ä—ñ–º —Å—É–±–æ—Ç–∏ —Ç–∞ –Ω–µ–¥—ñ–ª—ñ –∑ 9:00 –¥–æ 11:00 —Ç–∞ –∑ 16:00 –¥–æ 18:00.`, { reply_markup: cartConfirm })
            }
        }
        if (text == '‚ÑπÔ∏è–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')
            ctx.reply('Wow tort. –£–∫—Ä–∞—ó–Ω–∞, –º. –ö—Ä–µ–º–µ–Ω—á—É–∫, –≤—É–ª. –ß–∫–∞–ª–æ–≤–∞ 186', { reply_markup: infoKeyboard })
        if (text == '‚≠ê–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫')
            ctx.reply('–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤: (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)')

        if (text == 'WOW —Ç–æ—Ä—Ç–∏') {
            await ctx.reply('WOW —Ç–æ—Ä—Ç–∏:')
            ctx.session.currentCategory = 'WOW —Ç–æ—Ä—Ç–∏'
            await cakesMenuUpdate(ctx, { category: ctx.session.currentCategory })
        }
        if (text == '–ü–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω—ñ —Ü—É–∫–µ—Ä–∫–∏') {
            await ctx.reply('–ü–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω—ñ —Ü—É–∫–µ—Ä–∫–∏:')
            ctx.session.currentCategory = '–ü–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω—ñ —Ü—É–∫–µ—Ä–∫–∏'
            await cakesMenuUpdate(ctx, { category: ctx.session.currentCategory })
        }
        if (text == '–ü—Ä—è–Ω–∏–∫–∏') {
            await ctx.reply('–ü—Ä—è–Ω–∏–∫–∏:')
            ctx.session.currentCategory = '–ü—Ä—è–Ω–∏–∫–∏'
            await cakesMenuUpdate(ctx, { category: ctx.session.currentCategory })
        }
        if (text == '–ü–µ—á–∏–≤–æ –¢–ú –õ—é–±—á–∏–∫') {
            await ctx.reply('–ü–µ—á–∏–≤–æ –¢–ú –õ—é–±—á–∏–∫:')
            ctx.session.currentCategory = '–ü–µ—á–∏–≤–æ –¢–ú –õ—é–±—á–∏–∫'
            await cakesMenuUpdate(ctx, { category: ctx.session.currentCategory })
        }

        if (text == "üÜò–ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º") {
            ctx.reply("–ë–∞–∂–∞—î—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏—Å—è? (–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—ñ–ª—å–∫–∏ —É –±—É–¥–Ω—ñ, –∑ 9:00 –¥–æ 17:00)", { reply_markup: clearHelp })
        }
        if (text == '‚¨ÖÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é') {
            ctx.reply('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', { reply_markup: { resize_keyboard: true, keyboard: mainMenu.build() } })
        }
        if (text == '‚¨ÖÔ∏è–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó') {
            ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:', { reply_markup: { resize_keyboard: true, keyboard: cakeCategorys.build() } })
        }

        if (text == '–©–µ —Ç–æ—Ä—Ç–∏‚û°Ô∏è') {
            nextPage(ctx, currentCategory)
        }
        if (text == '‚¨ÖÔ∏è–©–µ —Ç–æ—Ä—Ç–∏') {
            prevPage(ctx, currentCategory)
        }

        if (ctx.session.waitDeliveryPoint) {
            ctx.session.order.deliveryPoint = text;
            await ctx.reply('–í–∞—à–∞ –∞—Ä–¥–µ—Å–∞: ' + text, { reply_markup: { resize_keyboard: true, keyboard: cakeCategorys.build() } })
            ctx.reply('–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:', { reply_markup: calendar.getCalendarKeyboard() })
            ctx.session.waitDeliveryPoint = false;
        }
        cakeModel.findOne({ name: text }).then(async cake => {
            if (cake != null) {
                ctx.session.product.cake = text
                ctx.session.product.price = cake.price
                ctx.session.cart.push({ cake: product.cake, price: product.price, category: cake.category })
                await ctx.reply('–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫', { reply_markup: productMenu })
            }
        })
    }
})

bot.on('callback_query:data', async ctx => {
    const data = ctx.callbackQuery.data;
    const cart = ctx.session.cart;
    const order = ctx.session.order;
    const product = ctx.session.product;

    if (data == 'delete') {
        ctx.editMessageReplyMarkup({ reply_markup: emptyKeyboard });
    }

    if (data == 'openCart') {
        let cartList = '';
        ctx.session.order.price = 0;
        for (let i = 0; i < cart.length; i++) {
            if (cart[i].category == 'WOW —Ç–æ—Ä—Ç–∏') {
                cartList += "–¢–æ—Ä—Ç "
            }
            else if (cart[i].category == '–ü–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω—ñ —Ü—É–∫–µ—Ä–∫–∏') {
                cartList += "–¶—É–∫–µ—Ä–∫–∏ "
            }
            else if (cart[i].category == '–ü—Ä—è–Ω–∏–∫–∏') {
                cartList += "–ü—Ä—è–Ω–∏–∫–∏ "
            }
            else if (cart[i].category == '–ü–µ—á–∏–≤–æ –¢–ú –õ—é–±—á–∏–∫') {
                cartList += "–ü–µ—á–∏–≤–æ "
            }
            ctx.session.order.price += cart[i].price;
            cartList += `${cart[i].cake} (${cart[i].price} –≥—Ä–Ω.);\n`
        }
        ctx.deleteMessage();
        ctx.reply(`–¢–æ–≤–∞—Ä–∏ —É –≤–∞—à–æ–º—É –∫–æ—à–∏–∫—É: ${cart.length}\n\n–í–∞—à –∫–æ—à–∏–∫:\n${cartList}\n–í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç–∏: ${ctx.session.order.price} –≥—Ä–Ω.\n–ü—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 500 –≥—Ä–Ω - –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞\n–î–æ—Å—Ç–∞–≤–∫–∞, –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –∫—Ä—ñ–º —Å—É–±–æ—Ç–∏ —Ç–∞ –Ω–µ–¥—ñ–ª—ñ –∑ 9:00 –¥–æ 11:00 —Ç–∞ –∑ 16:00 –¥–æ 18:00.`, { reply_markup: cartConfirm })
    }

    if (data == 'orderCart') {
        let cartList = '';
        ctx.session.order.price = 0;
        ctx.session.order.cartArray = [];
        for (let i = 0; i < cart.length; i++) {
            ctx.session.order.price += cart[i].price;
            ctx.session.order.cartArray.push(`${cart[i].cake} (${cart[i].price} –≥—Ä–Ω.)`)
            cartList += `${cart[i].cake} (${cart[i].price} –≥—Ä–Ω.);\n`
        }
        ctx.session.order.cart = cartList;
        JSON.stringify(order.cartArray);
        ctx.editMessageText('–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', { reply_markup: deliveryChoose })
    }

    if (data == 'clearCart') {
        ctx.deleteMessage();
        ctx.reply('üóëÔ∏è–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π')
        ctx.session.cart = [];
    }

    if (data == 'deleteProduct') {
        ctx.deleteMessage();
        ctx.session.cart.shift();
        ctx.reply('–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫—É')
    }

    if (data == 'delivery') {
        ctx.deleteMessage()
        ctx.reply('–ù–∞–ø–∏—à—ñ—Ç—å –∞–¥—Ä–µ—Å—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏, –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è‚¨áÔ∏è', { reply_markup: { resize_keyboard: true, keyboard: requestLocation.build() } })
        ctx.session.waitDeliveryPoint = true
    }

    if (data == 'pickup') {
        ctx.deleteMessage()
        ctx.session.order.deliveryPoint = '–°–∞–º–æ–≤–∏–≤—ñ–∑'
        ctx.reply('–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:', { reply_markup: calendar.getCalendarKeyboard() })
    }

    if (data == 'helpNo') {
        if (order.date == undefined)
            ctx.editMessageText('–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n–ö–æ—à–∏–∫:\n' + order.cart + '\n–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: (–Ω–µ –≤–∫–∞–∑–∞–Ω–∞)' + '\n–í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç–∏: ' + order.price + '–≥—Ä–Ω\–ü—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 500 –≥—Ä–Ω - –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞\n–î–æ—Å—Ç–∞–≤–∫–∞, –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –∫—Ä—ñ–º —Å—É–±–æ—Ç–∏ —Ç–∞ –Ω–µ–¥—ñ–ª—ñ –∑ 9:00 –¥–æ 11:00 —Ç–∞ –∑ 16:00 –¥–æ 18:00.', { reply_markup: orderConfirm })
        else
            ctx.editMessageText('–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n–ö–æ—à–∏–∫:\n' + order.cart + '\n–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ' + order.date + '\n–í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç–∏: ' + order.price + '–≥—Ä–Ω\n–ü—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 500 –≥—Ä–Ω - –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞\n–î–æ—Å—Ç–∞–≤–∫–∞, –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –∫—Ä—ñ–º —Å—É–±–æ—Ç–∏ —Ç–∞ –Ω–µ–¥—ñ–ª—ñ –∑ 9:00 –¥–æ 11:00 —Ç–∞ –∑ 16:00 –¥–æ 18:00.', { reply_markup: orderConfirm })
    }
    if (data == 'bought') {
        await userModel.findOne({ _id: ctx.from.id }).then(user => {
            ctx.session.order.phoneNumber = user.phoneNumber
        })
        await createOrder(ctx, order)
        await optionsModel.findOne({}).then(async options => {
            sMail(options.mail, ctx.from.first_name + ' (' + ctx.from.id + ')', '–ö–æ—à–∏–∫:\n' + order.cart + '\n–í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç–∏: ' + order.price + ' –≥—Ä–Ω\n' + '–ê–¥—Ä–µ—Å–∞: ' + order.deliveryPoint + '\n–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ' + order.date + '\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ' + order.phoneNumber)
        })
        ctx.session.order = {}
        ctx.session.cart = []
    }
    if (data == 'backToMainMenu') {
        ctx.editMessageReplyMarkup({ reply_markup: emptyKeyboard })
        ctx.reply('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', { reply_markup: { resize_keyboard: true, keyboard: mainMenu.build() } })
    }
    if (data == 'callHelp') {
        ctx.editMessageReplyMarkup({ reply_markup: { remove_keyboard: true } })
        if ((moment(new Date).day() < 6) && (moment(new Date, moment.TIME).isAfter(moment(new Date, moment.TIME).startOf('day').add(17, 'h')) || moment(new Date, moment.TIME).isBefore(moment(new Date, moment.TIME).startOf('day').add(9, 'h')))) {
            ctx.reply('–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: ' + moment(new Date, moment.TIME).format('HH:mm') + '\n–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å —Ç—ñ–ª—å–∫–∏ —É –±—É–¥–Ω—ñ, –∑ 9:00 –¥–æ 17:00', { reply_markup: { remove_keyboard: true } })
        }
        else {
            await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
            await ctx.replyWithContact(managerPhoneNum, '–û–ø–µ—Ä–∞—Ç–æ—Ä').catch(async err => { await ctx.reply('–û–ø–µ—Ä–∞—Ç–æ—Ä:\n' + managerPhoneNum) })
        }
    }
    if (data == 'closeKeyboard') {
        ctx.editMessageReplyMarkup({ reply_markup: emptyKeyboard })
    }

    if (data === 'null') {
        return;
    }
    else if (data === 'prev') {
        ctx.editMessageReplyMarkup({ reply_markup: calendar.getPrevMonth() });
    }
    else if (data === 'next') {
        ctx.editMessageReplyMarkup({ reply_markup: calendar.getNextMonth() });
    }
    else if (moment(data).isValid()) {
        ctx.deleteMessage();
        ctx.session.order.date = moment(data).format('DD-MM-YYYY');
        ctx.reply("–ë–∞–∂–∞—î—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏—Å—è? (–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—ñ–ª—å–∫–∏ —É –±—É–¥–Ω—ñ, –∑ 9:00 –¥–æ 17:00)", { reply_markup: help })
    }
    await ctx.answerCallbackQuery();
})

bot.start()

process.once("SIGINT", () => bot.stop());
process.once("SIGTERM", () => bot.stop());

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms * 1000));
